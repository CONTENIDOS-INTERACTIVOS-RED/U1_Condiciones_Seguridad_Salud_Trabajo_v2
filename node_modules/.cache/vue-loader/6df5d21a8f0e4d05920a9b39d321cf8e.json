{"remainingRequest":"/home/runner/work/U1_Condiciones_Seguridad_Salud_Trabajo_v2/U1_Condiciones_Seguridad_Salud_Trabajo_v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Condiciones_Seguridad_Salud_Trabajo_v2/U1_Condiciones_Seguridad_Salud_Trabajo_v2/src/views/curso/Tema3.vue?vue&type=template&id=bf36f2f0&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Condiciones_Seguridad_Salud_Trabajo_v2/U1_Condiciones_Seguridad_Salud_Trabajo_v2/src/views/curso/Tema3.vue","mtime":1753317468828},{"path":"/home/runner/work/U1_Condiciones_Seguridad_Salud_Trabajo_v2/U1_Condiciones_Seguridad_Salud_Trabajo_v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Condiciones_Seguridad_Salud_Trabajo_v2/U1_Condiciones_Seguridad_Salud_Trabajo_v2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Condiciones_Seguridad_Salud_Trabajo_v2/U1_Condiciones_Seguridad_Salud_Trabajo_v2/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Condiciones_Seguridad_Salud_Trabajo_v2/U1_Condiciones_Seguridad_Salud_Trabajo_v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Condiciones_Seguridad_Salud_Trabajo_v2/U1_Condiciones_Seguridad_Salud_Trabajo_v2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}